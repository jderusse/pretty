#!/usr/bin/env php
<?php

ini_set('display_errors', '1');
error_reporting(E_ALL);

$commands = [
    /**
     * The default command will not change any file, it's just an analysis.
     */
    'default' => [
        'php-cs-fixer' => 'php-cs-fixer fix --dry-run --allow-risky=yes --diff',
        'phpcs' => 'phpcs',
        'default' => 'phpcs --standard=PSR2 --extensions=php --ignore="vendor/*" .',
    ],
    /**
     * The `fix` command will modify the files to try to fix the errors.
     */
    'fix' => [
        'php-cs-fixer' => 'php-cs-fixer fix --allow-risky=yes',
        'phpcs' => 'phpcbf',
        'default' => 'phpcbf --standard=PSR2 --extensions=php --ignore="vendor/*" .',
    ],
    /**
     * In CI we disable the cache.
     */
    'ci' => [
        'php-cs-fixer' => 'php-cs-fixer fix --dry-run --allow-risky=yes --diff --using-cache=no',
        'phpcs' => 'phpcs --no-cache',
        'default' => 'phpcs --standard=PSR2 --extensions=php --ignore="vendor/*" --no-cache .',
    ],
];

$task = isset($argv[1]) ? $argv[1] : 'default';

if ($task === 'help') {
    help();
    exit(0);
}
if (!isset($commands[$task])) {
    echo "Unrecognized command '$task'\n";
    help();
    exit(1);
}

$commands = $commands[$task];

$command = '';

// Detect which tool to run
if (file_exists('.phpcs.xml') || file_exists('phpcs.xml') || file_exists('.phpcs.xml.dist') || file_exists('phpcs.xml.dist')) {
    echo "PHP CodeSniffer configuration file found, running CodeSniffer\n";
    $command = $commands['phpcs'];
    $program = explode(' ', $command, 1)[0];
    assertPhpCodeSnifferIsInstalled($program);
} elseif (file_exists('.php_cs') || file_exists('.php_cs.dist')) {
    echo "PHP-CS-Fixer configuration file found, running PHP-CS-Fixer\n";
    assertPhpCsFixerIsInstalled();
    $command = $commands['php-cs-fixer'];
} else {
    echo "No configuration file found, running PHP CodeSniffer with PSR-2\n";
    $command = $commands['default'];
    $program = explode(' ', $command, 2)[0];
    assertPhpCodeSnifferIsInstalled($program);
}

// Run the analysis
passthru($command, $exitCode);

if ($exitCode !== 0) {
    echo "Errors were found, run 'pretty fix' to fix them.\n";
}

exit($exitCode);

function commandExists($command)
{
    $return = shell_exec('command -v ' . escapeshellarg($command));
    return !empty($return);
}

function assertPhpCodeSnifferIsInstalled($command)
{
    if (!commandExists($command)) {
        echo <<<INSTRUCTIONS
ERROR: PHP CodeSniffer does not seem to be installed because the '$command' program cannot be found.
You can install it by following the instructions here: https://github.com/squizlabs/PHP_CodeSniffer#installation
INSTRUCTIONS;
        exit(1);
    }
}

function assertPhpCsFixerIsInstalled()
{
    if (!commandExists('php-cs-fixer')) {
        echo <<<'INSTRUCTIONS'
ERROR: PHP-CS-Fixer does not seem to be installed because the 'php-cs-fixer' program cannot be found.
You can install it by following the instructions here: https://github.com/FriendsOfPHP/PHP-CS-Fixer#installation
INSTRUCTIONS;
        exit(1);
    }
}

function help()
{
    echo <<<'HELP'
Available commands:
- pretty: runs an analysis (will not fix the code)
- pretty fix: fix as many errors as possible in the code
- pretty ci: runs an analysis in a continuous integration environment
- pretty help: displays this help
HELP;
}
